
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000043  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000332  00000000  00000000  000001ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f9  00000000  00000000  000004df  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000260  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  00000838  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000fb  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000048  00000000  00000000  00000983  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	27 d0       	rcall	.+78     	; 0x82 <main>
  34:	5e c0       	rjmp	.+188    	; 0xf2 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <flikgreen>:



void flikgreen(void)
{
PORTB&=(~1<<0);
  38:	c0 98       	cbi	0x18, 0	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  3a:	80 e2       	ldi	r24, 0x20	; 32
  3c:	9e e4       	ldi	r25, 0x4E	; 78
  3e:	01 97       	sbiw	r24, 0x01	; 1
  40:	f1 f7       	brne	.-4      	; 0x3e <__SP_H__>
_delay_ms(10);
PORTB|=(1<<0);
  42:	c0 9a       	sbi	0x18, 0	; 24
  44:	84 ed       	ldi	r24, 0xD4	; 212
  46:	9e e4       	ldi	r25, 0x4E	; 78
  48:	01 97       	sbiw	r24, 0x01	; 1
  4a:	f1 f7       	brne	.-4      	; 0x48 <__SREG__+0x9>
_delay_us(10090);

}
  4c:	08 95       	ret

0000004e <flikred>:
void flikred(void)
{
PORTB&=(~1<<3);
  4e:	88 b3       	in	r24, 0x18	; 24
  50:	80 7f       	andi	r24, 0xF0	; 240
  52:	88 bb       	out	0x18, r24	; 24
  54:	80 e2       	ldi	r24, 0x20	; 32
  56:	9e e4       	ldi	r25, 0x4E	; 78
  58:	01 97       	sbiw	r24, 0x01	; 1
  5a:	f1 f7       	brne	.-4      	; 0x58 <flikred+0xa>
_delay_ms(10);
PORTB|=(1<<3);
  5c:	c3 9a       	sbi	0x18, 3	; 24
  5e:	84 ed       	ldi	r24, 0xD4	; 212
  60:	9e e4       	ldi	r25, 0x4E	; 78
  62:	01 97       	sbiw	r24, 0x01	; 1
  64:	f1 f7       	brne	.-4      	; 0x62 <flikred+0x14>
_delay_us(10090);
}
  66:	08 95       	ret

00000068 <flikwhite>:
void flikwhite(void)
{
PORTB&=(~1<<4);
  68:	88 b3       	in	r24, 0x18	; 24
  6a:	80 7e       	andi	r24, 0xE0	; 224
  6c:	88 bb       	out	0x18, r24	; 24
  6e:	80 e2       	ldi	r24, 0x20	; 32
  70:	9e e4       	ldi	r25, 0x4E	; 78
  72:	01 97       	sbiw	r24, 0x01	; 1
  74:	f1 f7       	brne	.-4      	; 0x72 <flikwhite+0xa>
_delay_ms(10);
PORTB|=(1<<4);
  76:	c4 9a       	sbi	0x18, 4	; 24
  78:	84 ed       	ldi	r24, 0xD4	; 212
  7a:	9e e4       	ldi	r25, 0x4E	; 78
  7c:	01 97       	sbiw	r24, 0x01	; 1
  7e:	f1 f7       	brne	.-4      	; 0x7c <flikwhite+0x14>
_delay_us(10090);
  80:	08 95       	ret

00000082 <main>:
#include <avr/io.h>
#include <util/delay.h>
int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
DDRB=0b11111111;
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	87 bb       	out	0x17, r24	; 23
DDRC=0b0000000;
  8a:	14 ba       	out	0x14, r1	; 20
DDRD=0b00000000;
  8c:	11 ba       	out	0x11, r1	; 17
PORTB=0b11100110;
  8e:	86 ee       	ldi	r24, 0xE6	; 230
  90:	88 bb       	out	0x18, r24	; 24
PORTC=0b1111111;
  92:	8f e7       	ldi	r24, 0x7F	; 127
  94:	85 bb       	out	0x15, r24	; 21
PORTD=0b00000000;
  96:	12 ba       	out	0x12, r1	; 18
int press;
while(1)
{
flikgreen();
  98:	cf df       	rcall	.-98     	; 0x38 <flikgreen>
flikred();
  9a:	d9 df       	rcall	.-78     	; 0x4e <flikred>
flikwhite();
  9c:	e5 df       	rcall	.-54     	; 0x68 <flikwhite>
if(bit_is_set(PIND,4))
  9e:	84 9b       	sbis	0x10, 4	; 16
  a0:	0a c0       	rjmp	.+20     	; 0xb6 <main+0x34>
  a2:	c4 e0       	ldi	r28, 0x04	; 4
  a4:	d0 e0       	ldi	r29, 0x00	; 0
  a6:	07 c0       	rjmp	.+14     	; 0xb6 <main+0x34>
{
press=4;
}
while(press==4)
{
if(bit_is_set(PIND,3))
  a8:	83 9b       	sbis	0x10, 3	; 16
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <main+0x2e>
  ac:	c3 e0       	ldi	r28, 0x03	; 3
  ae:	d0 e0       	ldi	r29, 0x00	; 0
{
press=3;
}
PORTB&=(~1<<0);
  b0:	c0 98       	cbi	0x18, 0	; 24
flikred();
  b2:	cd df       	rcall	.-102    	; 0x4e <flikred>
flikwhite();
  b4:	d9 df       	rcall	.-78     	; 0x68 <flikwhite>
flikwhite();
if(bit_is_set(PIND,4))
{
press=4;
}
while(press==4)
  b6:	c4 30       	cpi	r28, 0x04	; 4
  b8:	d1 05       	cpc	r29, r1
  ba:	b1 f3       	breq	.-20     	; 0xa8 <main+0x26>
  bc:	09 c0       	rjmp	.+18     	; 0xd0 <main+0x4e>
flikred();
flikwhite();
}
while(press==3)
{
if(bit_is_set(PIND,2))
  be:	82 9b       	sbis	0x10, 2	; 16
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <main+0x44>
  c2:	c2 e0       	ldi	r28, 0x02	; 2
  c4:	d0 e0       	ldi	r29, 0x00	; 0
{
press=2;
}
PORTB&=(~1<<3);
  c6:	88 b3       	in	r24, 0x18	; 24
  c8:	80 7f       	andi	r24, 0xF0	; 240
  ca:	88 bb       	out	0x18, r24	; 24
flikgreen();
  cc:	b5 df       	rcall	.-150    	; 0x38 <flikgreen>
flikwhite();
  ce:	cc df       	rcall	.-104    	; 0x68 <flikwhite>
}
PORTB&=(~1<<0);
flikred();
flikwhite();
}
while(press==3)
  d0:	c3 30       	cpi	r28, 0x03	; 3
  d2:	d1 05       	cpc	r29, r1
  d4:	a1 f3       	breq	.-24     	; 0xbe <main+0x3c>
  d6:	09 c0       	rjmp	.+18     	; 0xea <main+0x68>
flikgreen();
flikwhite();
} 
while(press==2)
{
if(bit_is_set(PIND,1))
  d8:	81 9b       	sbis	0x10, 1	; 16
  da:	02 c0       	rjmp	.+4      	; 0xe0 <main+0x5e>
  dc:	c1 e0       	ldi	r28, 0x01	; 1
  de:	d0 e0       	ldi	r29, 0x00	; 0
{
press=1;
}
PORTB&=(~1<<4);
  e0:	88 b3       	in	r24, 0x18	; 24
  e2:	80 7e       	andi	r24, 0xE0	; 224
  e4:	88 bb       	out	0x18, r24	; 24
flikgreen();
  e6:	a8 df       	rcall	.-176    	; 0x38 <flikgreen>
flikred();
  e8:	b2 df       	rcall	.-156    	; 0x4e <flikred>
}
PORTB&=(~1<<3);
flikgreen();
flikwhite();
} 
while(press==2)
  ea:	c2 30       	cpi	r28, 0x02	; 2
  ec:	d1 05       	cpc	r29, r1
  ee:	a1 f6       	brne	.-88     	; 0x98 <main+0x16>
  f0:	f3 cf       	rjmp	.-26     	; 0xd8 <main+0x56>

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>
