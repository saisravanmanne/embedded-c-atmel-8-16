
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  00000142  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000170  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000f3  00000000  00000000  0000030a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000d8  00000000  00000000  000003fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  000004d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000015c  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3f 00 	call	0x7e	; 0x7e <main>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <series>:
	
	
}

void series(int a, int b,int c)
{
  7c:	08 95       	ret

0000007e <main>:

 

int main(void)
{
	DDRD=0b00000010;
  7e:	82 e0       	ldi	r24, 0x02	; 2
  80:	81 bb       	out	0x11, r24	; 17
	DDRB=0b11111111;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	87 bb       	out	0x17, r24	; 23
	PORTB=0b11101111;
  86:	8f ee       	ldi	r24, 0xEF	; 239
  88:	88 bb       	out	0x18, r24	; 24
	PORTD|=1<<7;
  8a:	97 9a       	sbi	0x12, 7	; 18
	TCCR1B=(1<<2|0<<1|1<<0);
  8c:	85 e0       	ldi	r24, 0x05	; 5
  8e:	8e bd       	out	0x2e, r24	; 46
	int i;
	TCNT1=0;
  90:	1d bc       	out	0x2d, r1	; 45
  92:	1c bc       	out	0x2c, r1	; 44
	int timer[2];
	timer[1]=15625;
	timer[2]=0;
    while(1)
    {
		 t=bit_is_set(PIND,7);
  94:	40 b3       	in	r20, 0x10	; 16
  96:	40 78       	andi	r20, 0x80	; 128
  98:	50 e0       	ldi	r21, 0x00	; 0
  9a:	50 93 61 00 	sts	0x0061, r21
  9e:	40 93 60 00 	sts	0x0060, r20
		 k=bit_is_clear(PIND,7);
  a2:	80 b3       	in	r24, 0x10	; 16
  a4:	99 27       	eor	r25, r25
  a6:	87 fd       	sbrc	r24, 7
  a8:	90 95       	com	r25
  aa:	80 95       	com	r24
  ac:	90 95       	com	r25
  ae:	69 2f       	mov	r22, r25
  b0:	66 1f       	adc	r22, r22
  b2:	66 27       	eor	r22, r22
  b4:	66 1f       	adc	r22, r22
  b6:	60 93 62 00 	sts	0x0062, r22
  ba:	10 92 63 00 	sts	0x0063, r1
		//if(bit_is_set(PIND,7))
		{
			series(timer[2],k,t);
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 3e 00 	call	0x7c	; 0x7c <series>
  c8:	e5 cf       	rjmp	.-54     	; 0x94 <main+0x16>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
