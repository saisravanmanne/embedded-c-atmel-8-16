
GccApplication5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000008a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000de  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000f1  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000b3  00000000  00000000  00000227  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000d5  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000034  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000014d  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000030  00000000  00000000  00000531  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 43 00 	jmp	0x86	; 0x86 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <avr/delay.h>

int main(void)
{
	DDRB=0b11111111;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
	PORTB=0b00010000;
  70:	80 e1       	ldi	r24, 0x10	; 16
  72:	88 bb       	out	0x18, r24	; 24
	DDRD=0b00000000;
  74:	11 ba       	out	0x11, r1	; 17
	PORTD|=1<<7;
  76:	97 9a       	sbi	0x12, 7	; 18
    }
}

void toggle(void)
{
	PORTB=0b00010011;
  78:	83 e1       	ldi	r24, 0x13	; 19
	int i,j;
	i=25000;
	j=900;
    while(1)
    {
	if(bit_is_clear(PIND,7))
  7a:	87 9b       	sbis	0x10, 7	; 16
    }
}

void toggle(void)
{
	PORTB=0b00010011;
  7c:	88 bb       	out	0x18, r24	; 24
    {
	if(bit_is_clear(PIND,7))
		{
		toggle();
		}
		if(bit_is_set(PIND,7))
  7e:	87 9b       	sbis	0x10, 7	; 16
  80:	fc cf       	rjmp	.-8      	; 0x7a <main+0xe>
		{
			PORTB=0b00000000;
  82:	18 ba       	out	0x18, r1	; 24
  84:	fa cf       	rjmp	.-12     	; 0x7a <main+0xe>

00000086 <_exit>:
  86:	f8 94       	cli

00000088 <__stop_program>:
  88:	ff cf       	rjmp	.-2      	; 0x88 <__stop_program>
