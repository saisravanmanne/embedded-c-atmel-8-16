
while ground check 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000176  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000dd  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001e4  00000000  00000000  000003b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  000005a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000018f  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000d0  00000000  00000000  00000753  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000040  00000000  00000000  00000823  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include <avr/io.h>
#include <avr/delay.h>
int main(void)
{
	DDRD=0b00000010;
  6c:	82 e0       	ldi	r24, 0x02	; 2
  6e:	81 bb       	out	0x11, r24	; 17
	PORTD=0b11111111;
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	82 bb       	out	0x12, r24	; 18
	DDRB=0b00010000;
  74:	80 e1       	ldi	r24, 0x10	; 16
  76:	87 bb       	out	0x17, r24	; 23
	PORTB=0b00010000;
  78:	88 bb       	out	0x18, r24	; 24
	
   while(1)
    {
		while(bit_is_clear(PIND,7))
  7a:	bf ef       	ldi	r27, 0xFF	; 255
  7c:	af ef       	ldi	r26, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7e:	29 e1       	ldi	r18, 0x19	; 25
  80:	30 e0       	ldi	r19, 0x00	; 0
		{
			PORTD^=1<<1;
			_delay_ms(1000);
		}
		_delay_ms(10000);
		PORTB^=1<<4;
  82:	70 e1       	ldi	r23, 0x10	; 16
	
   while(1)
    {
		while(bit_is_clear(PIND,7))
		{
			PORTD^=1<<1;
  84:	62 e0       	ldi	r22, 0x02	; 2
  86:	50 e1       	ldi	r21, 0x10	; 16
  88:	47 e2       	ldi	r20, 0x27	; 39
  8a:	0b c0       	rjmp	.+22     	; 0xa2 <main+0x36>
  8c:	82 b3       	in	r24, 0x12	; 18
  8e:	86 27       	eor	r24, r22
  90:	82 bb       	out	0x12, r24	; 18
  92:	85 2f       	mov	r24, r21
  94:	94 2f       	mov	r25, r20
  96:	f9 01       	movw	r30, r18
  98:	31 97       	sbiw	r30, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <main+0x2c>
  9c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  9e:	00 97       	sbiw	r24, 0x00	; 0
  a0:	d1 f7       	brne	.-12     	; 0x96 <main+0x2a>
	DDRB=0b00010000;
	PORTB=0b00010000;
	
   while(1)
    {
		while(bit_is_clear(PIND,7))
  a2:	87 9b       	sbis	0x10, 7	; 16
  a4:	f3 cf       	rjmp	.-26     	; 0x8c <main+0x20>
  a6:	8b 2f       	mov	r24, r27
  a8:	9a 2f       	mov	r25, r26
  aa:	f9 01       	movw	r30, r18
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <main+0x40>
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	00 97       	sbiw	r24, 0x00	; 0
  b4:	d1 f7       	brne	.-12     	; 0xaa <main+0x3e>
		{
			PORTD^=1<<1;
			_delay_ms(1000);
		}
		_delay_ms(10000);
		PORTB^=1<<4;
  b6:	88 b3       	in	r24, 0x18	; 24
  b8:	87 27       	eor	r24, r23
  ba:	88 bb       	out	0x18, r24	; 24
        //TODO:: Please write your application code 
    }
  bc:	f2 cf       	rjmp	.-28     	; 0xa2 <main+0x36>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
