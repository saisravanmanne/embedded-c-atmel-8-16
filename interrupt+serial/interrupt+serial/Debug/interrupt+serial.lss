
interrupt+serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000118  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  0000018c  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001ef  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000139  00000000  00000000  000003e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000192  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000007c  00000000  00000000  000006b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001a1  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000fa  00000000  00000000  000008cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  000009c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__vector_1>
   8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 8a 00 	jmp	0x114	; 0x114 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include <util/delay.h>
#include <avr/interrupt.h>
int c;
int main(void)
{
	ADMUX=(1<<REFS0);                         // For Aref=AVcc;
  7c:	80 e4       	ldi	r24, 0x40	; 64
  7e:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Rrescalar div factor =128
  80:	87 e8       	ldi	r24, 0x87	; 135
  82:	86 b9       	out	0x06, r24	; 6
	DDRD=0b101100000;
  84:	80 e6       	ldi	r24, 0x60	; 96
  86:	81 bb       	out	0x11, r24	; 17
	PORTD=0b010001100;
  88:	8c e8       	ldi	r24, 0x8C	; 140
  8a:	82 bb       	out	0x12, r24	; 18
	MCUCR&=((~(1<<ISC11))&(~(1<<ISC10)));
  8c:	85 b7       	in	r24, 0x35	; 53
  8e:	83 7f       	andi	r24, 0xF3	; 243
  90:	85 bf       	out	0x35, r24	; 53
	GICR|=1<<INT0;
  92:	8b b7       	in	r24, 0x3b	; 59
  94:	80 64       	ori	r24, 0x40	; 64
  96:	8b bf       	out	0x3b, r24	; 59
	GICR|=1<<INT1;
  98:	8b b7       	in	r24, 0x3b	; 59
  9a:	80 68       	ori	r24, 0x80	; 128
  9c:	8b bf       	out	0x3b, r24	; 59
	MCUCR&=((~(1<<ISC01))&(~(1<<ISC00)));
  9e:	85 b7       	in	r24, 0x35	; 53
  a0:	8c 7f       	andi	r24, 0xFC	; 252
  a2:	85 bf       	out	0x35, r24	; 53
	sei();
  a4:	78 94       	sei
	
    while(1)
    {
		PORTD&=(~(1<<7));
  a6:	97 98       	cbi	0x12, 7	; 18
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <main+0x2a>

000000aa <__vector_1>:
		
    }
}
ISR(INT0_vect)
{
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
PORTD|=1<<7;
  b8:	97 9a       	sbi	0x12, 7	; 18
	
	c=1;
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	90 93 61 00 	sts	0x0061, r25
  c2:	80 93 60 00 	sts	0x0060, r24
}
  c6:	9f 91       	pop	r25
  c8:	8f 91       	pop	r24
  ca:	0f 90       	pop	r0
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	0f 90       	pop	r0
  d0:	1f 90       	pop	r1
  d2:	18 95       	reti

000000d4 <__vector_2>:
ISR(INT1_vect)
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
PORTD^=1<<5;
  e2:	92 b3       	in	r25, 0x12	; 18
  e4:	80 e2       	ldi	r24, 0x20	; 32
  e6:	89 27       	eor	r24, r25
  e8:	82 bb       	out	0x12, r24	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ea:	8c ed       	ldi	r24, 0xDC	; 220
  ec:	9f ef       	ldi	r25, 0xFF	; 255
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <__vector_2+0x1a>
  f2:	8c e7       	ldi	r24, 0x7C	; 124
  f4:	92 e9       	ldi	r25, 0x92	; 146
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <__vector_2+0x22>
_delay_ms(262);
_delay_ms(150);
	
	c=2;
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	90 93 61 00 	sts	0x0061, r25
 102:	80 93 60 00 	sts	0x0060, r24
}
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>
