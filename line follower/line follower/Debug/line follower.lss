
line follower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000fa  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000040  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001b3  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ad  00000000  00000000  0000031d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000132  00000000  00000000  000003ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000064  00000000  00000000  000004fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000015b  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000090  00000000  00000000  000006bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include <avr/io.h>

int main(void)
{
	DDRB=0b00001111;
  6c:	8f e0       	ldi	r24, 0x0F	; 15
  6e:	87 bb       	out	0x17, r24	; 23
	PORTB=0b00000000;
  70:	18 ba       	out	0x18, r1	; 24
	DDRD=0b00000000;
  72:	11 ba       	out	0x11, r1	; 17
	PORTD=0b00000000;
  74:	12 ba       	out	0x12, r1	; 18
	

}
	void forward(void)
	{
		PORTB=0b00000101;
  76:	35 e0       	ldi	r19, 0x05	; 5
	{
		PORTB=0b00001010;
	}
	void left(void)
	{
		PORTB=0b000000110;
  78:	26 e0       	ldi	r18, 0x06	; 6
	}
	void right(void)
	{
		PORTB=0b00001001;
  7a:	99 e0       	ldi	r25, 0x09	; 9
	{
		PORTB=0b00000101;
	}
	void reverse(void)
	{
		PORTB=0b00001010;
  7c:	8a e0       	ldi	r24, 0x0A	; 10
	PORTB=0b00000000;
	DDRD=0b00000000;
	PORTD=0b00000000;
    while(1)
    {
		if((bit_is_set(PIND,6))&&(bit_is_set(PIND,7)))
  7e:	86 9b       	sbis	0x10, 6	; 16
  80:	02 c0       	rjmp	.+4      	; 0x86 <main+0x1a>
  82:	87 99       	sbic	0x10, 7	; 16
	

}
	void forward(void)
	{
		PORTB=0b00000101;
  84:	38 bb       	out	0x18, r19	; 24
    {
		if((bit_is_set(PIND,6))&&(bit_is_set(PIND,7)))
		{
			forward();
		}
		if((bit_is_clear(PIND,6))&&(bit_is_set(PIND,7)))
  86:	86 99       	sbic	0x10, 6	; 16
  88:	02 c0       	rjmp	.+4      	; 0x8e <main+0x22>
  8a:	87 99       	sbic	0x10, 7	; 16
	{
		PORTB=0b00001010;
	}
	void left(void)
	{
		PORTB=0b000000110;
  8c:	28 bb       	out	0x18, r18	; 24
		}
		if((bit_is_clear(PIND,6))&&(bit_is_set(PIND,7)))
		{
			left();
		}
		if((bit_is_set(PIND,6))&&(bit_is_clear(PIND,7)))
  8e:	86 9b       	sbis	0x10, 6	; 16
  90:	02 c0       	rjmp	.+4      	; 0x96 <main+0x2a>
  92:	87 9b       	sbis	0x10, 7	; 16
	{
		PORTB=0b000000110;
	}
	void right(void)
	{
		PORTB=0b00001001;
  94:	98 bb       	out	0x18, r25	; 24
		}
		if((bit_is_set(PIND,6))&&(bit_is_clear(PIND,7)))
		{
			right();
		}
		if((bit_is_clear(PIND,6))&&(bit_is_clear(PIND,7)))
  96:	86 99       	sbic	0x10, 6	; 16
  98:	f2 cf       	rjmp	.-28     	; 0x7e <main+0x12>
  9a:	87 99       	sbic	0x10, 7	; 16
  9c:	f0 cf       	rjmp	.-32     	; 0x7e <main+0x12>
	{
		PORTB=0b00000101;
	}
	void reverse(void)
	{
		PORTB=0b00001010;
  9e:	88 bb       	out	0x18, r24	; 24
  a0:	ee cf       	rjmp	.-36     	; 0x7e <main+0x12>

000000a2 <_exit>:
  a2:	f8 94       	cli

000000a4 <__stop_program>:
  a4:	ff cf       	rjmp	.-2      	; 0xa4 <__stop_program>
