
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000090  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000e4  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000010a  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000c2  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000013f  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000440  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000188  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000010  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void)
{


	UBRRH=((brc)>>8);
  6c:	10 bc       	out	0x20, r1	; 32
	UBRRL=(brc);
  6e:	87 e6       	ldi	r24, 0x67	; 103
  70:	89 b9       	out	0x09, r24	; 9
	UCSRB=(1<<0);
  72:	81 e0       	ldi	r24, 0x01	; 1
  74:	8a b9       	out	0x0a, r24	; 10
	UCSRC=(1<<1)|(1<<0);
  76:	83 e0       	ldi	r24, 0x03	; 3
  78:	80 bd       	out	0x20, r24	; 32
	while(1)
	{
		
		UDR = '8';
  7a:	88 e3       	ldi	r24, 0x38	; 56
  7c:	8c b9       	out	0x0c, r24	; 12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7e:	e7 ea       	ldi	r30, 0xA7	; 167
  80:	f1 e6       	ldi	r31, 0x61	; 97
  82:	31 97       	sbiw	r30, 0x01	; 1
  84:	f1 f7       	brne	.-4      	; 0x82 <main+0x16>
  86:	00 c0       	rjmp	.+0      	; 0x88 <main+0x1c>
  88:	00 00       	nop
  8a:	f8 cf       	rjmp	.-16     	; 0x7c <main+0x10>

0000008c <_exit>:
  8c:	f8 94       	cli

0000008e <__stop_program>:
  8e:	ff cf       	rjmp	.-2      	; 0x8e <__stop_program>
