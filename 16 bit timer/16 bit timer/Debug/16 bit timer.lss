
16 bit timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000096  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000ea  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000009c  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000060  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000c0  00000000  00000000  00000236  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000013d  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000010  00000000  00000000  00000459  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include <avr/io.h>

int main(void)
{
	DDRD=0b00000010;
  6c:	82 e0       	ldi	r24, 0x02	; 2
  6e:	81 bb       	out	0x11, r24	; 17
	PORTD=0b00000010;
  70:	82 bb       	out	0x12, r24	; 18
	TCCR1B=(1<<2|0<<1|1<<0);
  72:	85 e0       	ldi	r24, 0x05	; 5
  74:	8e bd       	out	0x2e, r24	; 46
        i=TCNT1;
		while(TCNT1<15625)
		{
		}
		
			PORTD^=1<<1;
  76:	22 e0       	ldi	r18, 0x02	; 2
	TCCR1B=(1<<2|0<<1|1<<0);
	
	int i;
    while(1)
    {
        i=TCNT1;
  78:	8c b5       	in	r24, 0x2c	; 44
  7a:	9d b5       	in	r25, 0x2d	; 45
		while(TCNT1<15625)
  7c:	8c b5       	in	r24, 0x2c	; 44
  7e:	9d b5       	in	r25, 0x2d	; 45
  80:	89 30       	cpi	r24, 0x09	; 9
  82:	9d 43       	sbci	r25, 0x3D	; 61
  84:	d8 f3       	brcs	.-10     	; 0x7c <main+0x10>
		{
		}
		
			PORTD^=1<<1;
  86:	82 b3       	in	r24, 0x12	; 18
  88:	82 27       	eor	r24, r18
  8a:	82 bb       	out	0x12, r24	; 18
			TCNT1=0;
  8c:	1d bc       	out	0x2d, r1	; 45
  8e:	1c bc       	out	0x2c, r1	; 44
		
        //TODO:: Please write your application code 
    }
  90:	f3 cf       	rjmp	.-26     	; 0x78 <main+0xc>

00000092 <_exit>:
  92:	f8 94       	cli

00000094 <__stop_program>:
  94:	ff cf       	rjmp	.-2      	; 0x94 <__stop_program>
