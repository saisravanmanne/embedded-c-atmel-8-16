
analog com.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000214  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f0  00000000  00000000  0000037a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000016b  00000000  00000000  0000046a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  000005d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000018d  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000003c  00000000  00000000  00000789  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  000007c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>

int main()
{
	DDRD=0x07; // set PD0, PD1 and PD2 as output pin
  6c:	87 e0       	ldi	r24, 0x07	; 7
  6e:	81 bb       	out	0x11, r24	; 17
	ACSR=0x00; //to set ACO bit as zero.
  70:	18 b8       	out	0x08, r1	; 8
	ADCSRA&=~(1<<ADEN); // to disable ADC
  72:	37 98       	cbi	0x06, 7	; 6
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  74:	81 e0       	ldi	r24, 0x01	; 1
	while(1)
	{
		SFIOR|=(1<<ACME); // bit is set to select the ADC channel
  76:	90 b7       	in	r25, 0x30	; 48
  78:	98 60       	ori	r25, 0x08	; 8
  7a:	90 bf       	out	0x30, r25	; 48
		ADMUX=0x00; // ADC0 channel is selected
  7c:	17 b8       	out	0x07, r1	; 7
  7e:	98 2f       	mov	r25, r24
  80:	9a 95       	dec	r25
  82:	f1 f7       	brne	.-4      	; 0x80 <main+0x14>
		_delay_us(1); // delay for synchronization
		if(bit_is_set(ACSR,ACO)) // if bit is set to 1
  84:	45 9b       	sbis	0x08, 5	; 8
  86:	02 c0       	rjmp	.+4      	; 0x8c <main+0x20>
		PORTD|=(1<<PD0); // send one to PD0 bit
  88:	90 9a       	sbi	0x12, 0	; 18
  8a:	01 c0       	rjmp	.+2      	; 0x8e <main+0x22>
		else // if bit is set to zero
		PORTD&=~(1<<PD0);
  8c:	90 98       	cbi	0x12, 0	; 18

		SFIOR|=(1<<ACME);
  8e:	90 b7       	in	r25, 0x30	; 48
  90:	98 60       	ori	r25, 0x08	; 8
  92:	90 bf       	out	0x30, r25	; 48
		ADMUX=0x01; // ADC1 channel is selected
  94:	87 b9       	out	0x07, r24	; 7
  96:	98 2f       	mov	r25, r24
  98:	9a 95       	dec	r25
  9a:	f1 f7       	brne	.-4      	; 0x98 <main+0x2c>
		_delay_us(1);
		if(bit_is_set(ACSR,ACO))
  9c:	45 9b       	sbis	0x08, 5	; 8
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <main+0x38>
		PORTD|=(1<<PD1);
  a0:	91 9a       	sbi	0x12, 1	; 18
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <main+0x3a>
		else
		PORTD&=~(1<<PD1);
  a4:	91 98       	cbi	0x12, 1	; 18

		SFIOR&=~(1<<ACME); // to select AIN1 pin as negative input
  a6:	90 b7       	in	r25, 0x30	; 48
  a8:	97 7f       	andi	r25, 0xF7	; 247
  aa:	90 bf       	out	0x30, r25	; 48
  ac:	98 2f       	mov	r25, r24
  ae:	9a 95       	dec	r25
  b0:	f1 f7       	brne	.-4      	; 0xae <main+0x42>
		_delay_us(1);
		if(bit_is_set(ACSR,ACO))
  b2:	45 9b       	sbis	0x08, 5	; 8
  b4:	02 c0       	rjmp	.+4      	; 0xba <main+0x4e>
		PORTD|=(1<<PD2);
  b6:	92 9a       	sbi	0x12, 2	; 18
  b8:	de cf       	rjmp	.-68     	; 0x76 <main+0xa>
		else
		PORTD&=~(1<<PD2);
  ba:	92 98       	cbi	0x12, 2	; 18
  bc:	dc cf       	rjmp	.-72     	; 0x76 <main+0xa>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
